/*Sample program for use with IBM WebSphere Message Broker
Â© Copyright International Business Machines Corporation 2007, 2010 
Licensed Materials - Property of IBM*/

CREATE COMPUTE MODULE FileWildcardSample_FILE_WILDCARD_COMPUTE
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
        DECLARE I INTEGER;
        DECLARE TOTAL_LENGTH INTEGER;
	  DECLARE SUBSTR_LENGTH INTEGER;
	  DECLARE NEW_DIR_NAME CHARACTER;
	  DECLARE NEW_FILE_NAME CHARACTER;
        DECLARE NEW_FILE_SUFFIX CHARACTER;
	  DECLARE CARDMATCH CHARACTER;
	  DECLARE INPUT_DIR_ROOT CHARACTER;
	  DECLARE OUTPUT_DIR_ROOT CHARACTER;

        SET OutputRoot.BLOB = InputRoot.BLOB;
        SET OutputLocalEnvironment = InputLocalEnvironment;

        -- set the suffix for the new output file
        SET NEW_FILE_SUFFIX='.txt';
		
	  -- filename in InputLocalEnvironment.Wildcard.WildcardMatch in format <receiver>@<branch> 
        -- will split file name on @ character
	  SET CARDMATCH = InputLocalEnvironment.Wildcard.WildcardMatch;

        -- get the total length of the wildcard and find the position of @
	  SET TOTAL_LENGTH = LENGTH (CARDMATCH);
	  SET I = POSITION ('@' IN CARDMATCH);
	  SET SUBSTR_LENGTH = TOTAL_LENGTH - I;

	  -- assign branch as directory name
	  SET NEW_DIR_NAME = SUBSTRING (CARDMATCH FROM I+1 FOR SUBSTR_LENGTH );   
	  -- assign receiver as file name
	  SET NEW_FILE_NAME = SUBSTRING (CARDMATCH FROM 1 FOR I-1 );  
         
	    
	  -- find out file directory root  
	  SET INPUT_DIR_ROOT = InputLocalEnvironment.File.Directory; 
	  SET TOTAL_LENGTH = LENGTH (INPUT_DIR_ROOT); 
	  SET I = POSITION ('_' IN INPUT_DIR_ROOT);
	  SET SUBSTR_LENGTH = TOTAL_LENGTH - I;
	  SET OUTPUT_DIR_ROOT = SUBSTRING (INPUT_DIR_ROOT FROM 1 FOR I-3 );
	     
	  -- concatenate file directory root with new subdirectory name 
	  SET OutputLocalEnvironment.Destination.File.Directory =  OUTPUT_DIR_ROOT || NEW_DIR_NAME;    
        -- concatentate new file name with file suffix
	  SET OutputLocalEnvironment.Destination.File.Name =  NEW_FILE_NAME|| NEW_FILE_SUFFIX;
	  RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
